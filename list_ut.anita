
#include "tunit.anita"

val default = fun() => {
  var list = LIST.list;
  list.append("San Jose");
  list.append("Los Angeles");
  list;
};

BEGIN_TEST(test_init)
  var list = LIST.list;
  assert_eq(list.begin.value, null);
  assert_eq(list.begin.next, false);
  assert_eq(list.end.value, null);
  assert_eq(list.end.prev, false);
END_TEST(4)

BEGIN_TEST(test_it)
  var list = default();
  var it = list.it(0);
  assert_eq(it.value, "San Jose");
  it = list.it(1);
  assert_eq(it.value, "Los Angeles");
END_TEST(2)

BEGIN_TEST(test_default)
  var list = default();
  assert_eq(list.size, 2);  
  assert_not(list.empty);
  var it = list.begin;
  assert(it.next);
  assert_eq(it.value, "San Jose");
  assert(it.next);
  assert_eq(it.value, "Los Angeles");
  assert_not(it.next);
END_TEST(7)

BEGIN_TEST(test_insert)
  var list = default();
  var it = list.begin;
  it.next;
  it.next;
  list.insert(it, "Sacramento");
  it = list.begin;
  it.next;
  assert_eq(it.value, "San Jose");
  it.next;
  assert_eq(it.value, "Sacramento");
  it.next;
  assert_eq(it.value, "Los Angeles");
END_TEST(3)

BEGIN_TEST(test_append)
  var list = default();
  list.append("San Francisco");
  var it = list.end;
  it.prev;
  assert_eq(it.value, "San Francisco");
END_TEST(1)

BEGIN_TEST(test_prepend)
  var list = default();
  list.prepend("Sacramento");
  var it = list.begin;
  it.next;
  assert_eq(it.value, "Sacramento");
END_TEST(1)

BEGIN_TEST(test_clear)
  var list = default();
  list.clear;
  assert_eq(list.size, 0);
  assert(list.empty);
END_TEST(2)

BEGIN_TEST(test_each)
  var list = default();
  var clone = LIST.list;
  list.each(fun(value) => clone.append(value));
  var it = clone.begin;
  assert(it.next);
  assert_eq(it.value, "San Jose");
  assert(it.next);
  assert_eq(it.value, "Los Angeles");
  assert_not(it.next);
END_TEST(5) 

BEGIN_TEST(test_erase)
  var list = default();
  var it = list.begin;
  it.next;
  list.erase(it);
  it = list.begin;
  while (it.next) assert_neq(it.value, "San Jose");
  assert_eq(list.size, 1);
END_TEST(2)

BEGIN_TEST(test_remove)
  var list = default();
  list.append("San Jose");
  list.prepend("San Jose");
  list.remove("San Jose");
  var it = list.begin;
  while (it.next) assert_neq(it.value, "San Jose");
  assert_eq(list.size, 1);
END_TEST(2)

val main = fun() => {
  this.test_init;
  this.test_default;
  this.test_it;
  this.test_insert;
  this.test_append;
  this.test_prepend;
  this.test_clear;
  this.test_each;
  this.test_erase;
  this.test_remove;
};

