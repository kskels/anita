
# MISSING: can not place element function inside list itself
# NOT NICE: compiler doesn't allow to write following code
# it._prev._next = element(value, prev, prev._next);
#
# list element
var element = fun(value, prev, next) => {
  object {
    var _value = value;
    var _prev = prev;
    var _next = next;
  };
};
# the list 
var list = fun() => {
  var _list = object {
    var _first;
    var _last;
    var _size;
    # util
    var _init = fun() => {
      this._first = element();
      this._last = element();
      var last = this._last;
      var first = this._first;
      first._next = last; 
      last._prev = first;
      this._size = 0;
    };
    # iterators 
    var _at = fun(pos) => {
      if (pos < 0) this._first
      else if (pos == 0) this._first._next
      else if (pos == this._size-1) this._last._prev
      else if (pos > this._size-1) this._last
      else { 
        # traverse list for the others
        var e = this._first;
        var i = 0;
        while (i <= pos)  { 
          e = e._next;
          i = i + 1;
        }
        e;
      }
    }; 
    var it = fun(pos) => {
      object {
        var _curr = this._at(pos);
        var next = fun() => {
          if (null != this._curr._next._next) {
            this._curr = this._curr._next;
            true;
          } else false;
        }; 
        var prev = fun() => {
          if (null != this._curr._prev._prev) {
            this._curr = this._curr._prev;
  		  true;
          } else false;
        };
        var value = fun() => this._curr._value; 
      };
    }; 
    var begin = fun() => this.it(-1);
    var end = fun() => this.it(this._size);
    # capacity
    var size = fun() => this._size;
    var empty = fun() => if (this._size > 0) false else true;
    # modifiers
    var insert = fun(it, value) => {
      var prev = it._curr._prev;
      prev._next = element(value, prev, prev._next);
      var curr = it._curr;
      curr._prev = prev._next;
      this._size = this._size + 1;  
    };
    var append = fun(value) => {
      this.insert(this.it(this._size), value);
    };
    var prepend = fun(value) => {
      this.insert(this.it(0), value);
    };
    var erase = fun(it) => {
      if (this._size > 1) { 
        var prev = it._curr._prev;
        prev._next = prev._next._next;
        var next = it._curr._next;
        next._prev = next._prev._prev;
        this._size = this._size - 1;
      }
    }; 
    var clear = fun() => this._init;
    # operations
    var remove = fun(value) => {
      var it = this.begin;
      while (it.next) if (it.value == value) this.erase(it);
    };
  };
  _list._init();
  _list;
};

